AWSTemplateFormatVersion: '2010-09-09'
Description: API setup for Capita RTA web application
Outputs:
  oRtaApi:
    Value:
      Ref: RtaApi
Parameters:
  pDepartment:
    Default: ccm
    Description: Department identifier for unique bucket naming, lowercase
    Type: String
  pEnvironment:
    Default: DEV
    Description: Environment label to apply to resources naming
    Type: String
  pEnvironmentLowerCase:
    Default: dev
    Description: Environment label to apply to resources naming, lowercase
    Type: String
  pRtaAlarmsDb:
    Description: Name of the alarms table
    Type: String
  pRtaAlarmsDbArn:
    Description: ARN of the alarms table
    Type: String
  pUserPoolArn:
    Description: Arn for the Cognito User Pool
    Type: String
Resources:
  RtaApi:
    Properties:
      Body:
        info:
          title: ConnectRtaApi
          version: 1.0.0
        paths:
          /rta:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              description: Invokes the lambda
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - Ref: AWS::Region
                    - :lambda:path/2015-03-31/functions/
                    - Fn::GetAtt:
                      - RtaApiLambda
                      - Arn
                    - /invocations
        securityDefinitions:
          CognitoAuthorizer:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              providerARNs:
              - Ref: pUserPoolArn
              type: cognito_user_pools
            x-amazon-apigateway-authtype: cognito_user_pools
        swagger: 2.0
      Name:
        Fn::Join:
        - ''
        - - ConnectRta-
          - Ref: pDepartment
          - '-'
          - Ref: pEnvironment
          - Api
    Type: AWS::ApiGateway::RestApi
  RtaApiLambda:
    Properties:
      CodeUri: s3://s3-capita-ccm-test-lambdas-eu-central-1/5aa7ec6e1343c894d05cce6a7bfd58b1
      Environment:
        Variables:
          ALARM_DB:
            Ref: pRtaAlarmsDb
      FunctionName:
        Fn::Join:
        - '-'
        - - lmbRtaApi
          - Ref: pDepartment
          - Ref: pEnvironment
      Handler: lambda_handler.handler
      Policies:
      - AWSLambdaExecute
      - Statement:
        - Action:
          - dynamodb:Scan
          Effect: Allow
          Resource:
            Ref: pRtaAlarmsDbArn
        Version: '2012-10-17'
      Runtime: python3.6
      Tags:
        bus:BusinessUnit:
          Ref: pDepartment
        tech:ApplicationID:
          Fn::Sub: capita-${pDepartment}-rta-webapp
        tech:Environment:
          Ref: pEnvironmentLowerCase
      Timeout: 180
    Type: AWS::Serverless::Function
  RtaApiLambdaPermissions:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RtaApiLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: RtaApi
          - /*
    Type: AWS::Lambda::Permission
  RtaAprDeployment:
    Properties:
      Description: Prod deployment for RTA API
      RestApiId:
        Ref: RtaApi
      StageName: prod
    Type: AWS::ApiGateway::Deployment
Transform: AWS::Serverless-2016-10-31
