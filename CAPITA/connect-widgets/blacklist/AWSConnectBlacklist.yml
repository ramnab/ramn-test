# Template which creates a DynamoDB and Lambda function along with assoacited IAM permissions for Lambda function to be called from within AWS Connect.
# The DynamoDB table is used to store telephone numbers and the Lambda function is used to scan the table to check whether a telephone
# number passed as a parameter by AWS Connect is located within the table, returning true or false appropriately.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Create dynamoDB and Lambda function (and IAM elements) to enable blacklist functionality in AWS Connect."
Parameters:
  pDBName:
    Type: "String"
    Description: "The desired name of your DynamoDB table"
  pConnectInstanceARN:
    Type: "String"
    Description: "ARN of the existing AWS Connect instance from which the Lambda function will be invoked."
  pLambdaBucket:
    Type: "String"
    Description: "The name of the Lambda bucket containing the code for this widget"
Resources:
  # The DynamoDB table used to store telephone numbers.
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref pDBName
      SSESpecification:
        SSEEnabled: "true"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: "CallingNumber"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CallingNumber"
          KeyType: "HASH"

  # The Lambda function resource which is called from within AWS Connect to scan DynamoDBTable for the telephone number passed as a parameter.
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Connect_Blacklist_Read"
      Description: "Scans DynamoDB table to see if Amazon Connect callers number is blacklisted, and returns true or false appropriately."
      Runtime: "python3.6"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref pLambdaBucket
        S3Key: "AWSConnectBlacklist.zip"
      Environment:
        Variables:
          DynamoDBTableName: !Ref pDBName
    DependsOn: "LambdaExecutionRole"

  # The IAM role applied to LambdaFunction which enables LambdaFunction to scan DynamoDBTable and write logs to CloudWatch.
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "BlackList_DynmoaDB_Read"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamoDB:Scan"
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
    DependsOn: "DynamoDBTable"

  # Lambda permission applied to LambdaFunction which allows LambdaFunction to be called from within AWS Connect.
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: "Connect_Blacklist_Read"
      Principal: "connect.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Ref pConnectInstanceARN
    DependsOn: "LambdaFunction"

