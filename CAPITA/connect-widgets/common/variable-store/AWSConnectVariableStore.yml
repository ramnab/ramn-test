# Template which creates a DynamoDB and Lambda function along with associated IAM permissions for Lambda function to be called from within AWS Connect.
# The DynamoDB table is used to store true / false variables, which can be used to enhance AWS Connect functionality. AWS Connect Lambda block passes the
# variable name into the Lambda function and the true / false value of the variable is returned into the AWS Connect call flow for decision making.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Create dynamoDB and Lambda function (and IAM elements) to enable variable permanence and comparison functionality in AWS Connect."
Parameters:
  pDBName:
    Type: "String"
    Description: "The desired name of your DynamoDB table"
  pLambdaBucket:
    Type: "String"
    Description: "The name of the Lambda bucket containing the code for this widget"
Resources:

  # The DynamoDB table which is used to hold variables and their values.
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref pDBName
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: "true"
      AttributeDefinitions:
        - AttributeName: "VariableName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "VariableName"
          KeyType: "HASH"

  # The Lambda function used for scanning the DynamoDB table for a given parameter and returning the value of any located variables.
  LambdaREADFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Connect_VariableStore_Read"
      Description: "Scans DynamoDB table to return the value of the variable (passed in by Connect) stored in DynamoDB."
      Runtime: "python3.6"
      Handler: "read_function.lambda_handler"
      Role: !GetAtt LambdaREADExecutionRole.Arn
      Code:
        S3Bucket: !Ref pLambdaBucket
        S3Key: "AWSConnectVariableStore.zip"
      Environment:
        Variables:
          DynamoDBTableName: !Ref pDBName
    DependsOn: "LambdaREADExecutionRole"

  # Role applied to the Lambda function to allow it to scan the specific DynamoDBTable and put CloudWatch logs.
  LambdaREADExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "Connect_VariableStore_Read"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamoDB:Scan"
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
    DependsOn: "DynamoDBTable"

  LambdaWRITEFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Connect_VariableStore_Write"
      Description: "Takes two parameters - VariableName and VariableValue - and puts that key:value pair into the DynamoDB table"
      Runtime: "python3.6"
      Handler: "write_function.lambda_handler"
      Role: !GetAtt LambdaWRITEExecutionRole.Arn
      Code:
        S3Bucket: !Ref pLambdaBucket
        S3Key: "AWSConnectVariableStore.zip"
      Environment:
        Variables:
          DynamoDBTableName: !Ref pDBName
    DependsOn: "LambdaWRITEExecutionRole"

  LambdaWRITEExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "VariableStore_DynamoDB_Write"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamoDB:UpdateItem"
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
    DependsOn: "DynamoDBTable"